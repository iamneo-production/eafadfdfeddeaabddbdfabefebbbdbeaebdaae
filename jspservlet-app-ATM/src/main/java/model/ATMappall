package ATM;


import java.util.HashMap;
import java.util.Map;


class AccountDetails {
    private String accountType;
    private double withdrawOrDepositAmount;
    private double availableBalance;
    private int pin;

    public AccountDetails(String accountType, double withdrawOrDepositAmount, double availableBalance, int pin) {
        this.accountType = accountType;
        this.withdrawOrDepositAmount = withdrawOrDepositAmount;
        this.availableBalance = availableBalance;
        this.pin = pin;
    }

    
    public String getAccountType() {
        return accountType;
    }

    public void setAccountType(String accountType) {
        this.accountType = accountType;
    }

    public double getWithdrawOrDepositAmount() {
        return withdrawOrDepositAmount;
    }

    public void setWithdrawOrDepositAmount(double withdrawOrDepositAmount) {
        this.withdrawOrDepositAmount = withdrawOrDepositAmount;
    }

    public double getAvailableBalance() {
        return availableBalance;
    }

    public void setAvailableBalance(double availableBalance) {
        this.availableBalance = availableBalance;
    }

    public int getPin() {
        return pin;
    }

    public void setPin(int pin) {
        this.pin = pin;
    }
}

interface InterfaceClass {
    abstract public double withdrawAmount(double amount, int pin);
    abstract public double depositAmount(double amount, int pin);
    abstract public double accountBalance(int pin);
}


public class ATM implements InterfaceClass {
    private Map<Integer, AccountDetails> accountDetailsMap = new HashMap<>();

   
    @Override
    public double withdrawAmount(double amount, int pin) {
        if (accountDetailsMap.containsKey(pin)) {
            AccountDetails account = accountDetailsMap.get(pin);
            double currentBalance = account.getAvailableBalance();
            if (currentBalance >= amount) {
                currentBalance -= amount;
                account.setAvailableBalance(currentBalance);
                return amount;
            } else {
                return -1; // Insufficient balance
            }
        } else {
            return -2; // Account not found
        }
    }

    @Override
    public double depositAmount(double amount, int pin) {
        if (accountDetailsMap.containsKey(pin)) {
            AccountDetails account = accountDetailsMap.get(pin);
            double currentBalance = account.getAvailableBalance();
            currentBalance += amount;
            account.setAvailableBalance(currentBalance);
            return amount;
        } else {
            return -2; // Account not found
        }
    }

    @Override
    public double accountBalance(int pin) {
        if (accountDetailsMap.containsKey(pin)) {
            AccountDetails account = accountDetailsMap.get(pin);
            return account.getAvailableBalance();
        } else {
            return -2; // Account not found
        }
    }

    public static void main(String[] args) {
        ATM atm = new ATM();

        
        AccountDetails account1 = new AccountDetails("Savings", 1000.0, 12345.0, 1234);
        AccountDetails account2 = new AccountDetails("Checking", 500.0, 56789.0, 5678);
        atm.accountDetailsMap.put(account1.getPin(), account1);
        atm.accountDetailsMap.put(account2.getPin(), account2);

    
        double withdrawAmount = atm.withdrawAmount(200.0, 1234);
        double depositAmount = atm.depositAmount(300.0, 5678);
        double accountBalance = atm.accountBalance(1234);

        
        System.out.println("Withdrawn Amount: " + withdrawAmount);
        System.out.println("Deposited Amount: " + depositAmount);
        System.out.println("Account Balance: " + accountBalance);
    }
}
